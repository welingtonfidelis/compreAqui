type Address {
  id: ID
  cep: String
  state: String
  city: String
  district: String
  street: String
  complement: String
  number: Int
}

type Brand {
  id: ID
  ProviderId: ID
  brandDescription: String
}

type Category {
  id: ID
  name: String
  photoUrl: String
}

type Mutation {
  photoTest: String
  uploadFile(input: Upload!): String
  userStore(name: String!, doc: String!, email: String!, phone1: String!, phone2: String!, user: String!, birth: String!, password: String!, type: String!, cep: String!, state: String!, city: String!, district: String!, street: String!, complement: String!, number: Int!): User
  userUpdate(id: ID!, name: String!, doc: String!, email: String!, phone1: String!, phone2: String!, user: String!, birth: String!, password: String!, type: String!, AddressId: ID, cep: String!, state: String!, city: String!, district: String!, street: String!, complement: String!, number: Int!): String
  userDelete(id: ID!): String
  brandStore(brandDescription: String!): Brand
  brandUpdate(id: ID!, brandDescription: String!): String
  brandDelete(id: ID!): String
  sizeStore(sizeDescription: String!): Size
  sizeUpdate(id: ID!, sizeDescription: String!): String
  sizeDelete(id: ID!): String
  productStore(BrandId: ID!, SizeId: ID!, SubcategoryId: ID!, name: String!, description: String, price: Float!, stock: Int!): Product
  productUpdate(id: ID!, BrandId: ID!, SizeId: ID!, SubcategoryId: ID!, description: String!, price: Float!, stock: Int!): String
  productDelete(id: ID!): String
  requestStore(ProviderId: ID!, value: Float!, delivery: String!, cash: String!, cashBack: Float!, observation: String, products: [RequestListProduct!]): Request
  requestChangeStatus(id: ID!, status: String, timeWait: Int, reason: String): String
}

type Product {
  id: ID
  ProviderId: ID
  BrandId: ID
  SizeId: ID
  SubcategoryId: ID
  name: String
  description: String
  price: Float
  stock: Int
  Provider: User
  Brand: Brand
  Size: Size
  ProductPhotos: [ProductPhoto]
}

type ProductPhoto {
  id: ID
  ProductId: ID
  photoUrl: String
}

type Query {
  test: String
  userIndex(page: Int): [User]
  userIndexByCategory(page: Int, CategoryId: ID!): [User]
  userShow(id: ID!): User
  userShowByDoc(doc: String!): User
  userShowByEmail(email: String!): User
  userShowByUser(user: String!): User
  sessionSign(user: String!, password: String!, playId: String): token
  brandCount: Int
  brandIndex(page: Int): [Brand]
  brandShow(id: ID!): Brand
  stateIndex(page: Int): [State]
  categoryIndex: [Category]
  subcategoryIndex: [Subcategory]
  subcategoryIndexByUser: [Subcategory]
  sizeCount: Int
  sizeIndex(page: Int): [Size]
  sizeShow(id: ID!): Size
  productIndex(ProviderId: ID, page: Int): [Product]
  productCount(ProviderId: ID): Int
  productShow(id: ID!): Product
  requestIndex(page: Int, status: String): [Request]
  requestCount(status: String): Int
  requestShow(id: ID!): Request
}

type Request {
  id: ID
  ClientId: ID
  ProviderId: ID
  timeWait: Int
  value: Float
  status: String
  delivery: String
  cashBack: Float
  cash: String
  createdAt: String
  Client: User
  Provider: User
  observation: String
  reason: String
  RequestProducts: [RequestProducts]
}

input RequestListProduct {
  id: ID
  amount: Int
  price: Float
}

type RequestProducts {
  id: ID
  RequestId: ID
  ProductId: ID
  amount: Int
  price: Float
  request: Request
  Product: Product
}

type Size {
  id: ID
  ProviderId: ID
  sizeDescription: String
}

type State {
  id: ID
  description: String
  code: String
}

type Subcategory {
  id: ID
  CategoryId: ID
  name: String
  photoUrl: String
}

type token {
  name: String
  token: String
  typeUser: String
  typeUserEncript: String
  photoUrl: String
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  id: ID
  name: String
  doc: String
  email: String
  phone1: String
  phone2: String
  user: String
  birth: String
  photoUrl: String
  tokenReset: String
  type: String
  Address: Address
  Category: Category
  Subcategory: Subcategory
  playId: String
}
